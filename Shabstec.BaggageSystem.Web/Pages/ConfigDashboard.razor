@page "/configuration"
@layout MainLayout
@using System.Text;
@using System.Net.Http;
@using System.Text.Json;
@using BlazorApp.Web.Models;
@using Microsoft.AspNetCore.Authorization;
@inject IAlertService AlertService
@attribute [Authorize]
@inject IAccountService AccountService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationMgr

<style>
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh; /* 100% of the viewport height */
    }

    .loading-message {
        white-space: nowrap;
        overflow: hidden;
        text-align: center;
    }
</style>
<div style="color:white">
    <h1>Configurations</h1>
    @if (configurations == null || configurations.Count == 0)
    {
        <NavLink href="configuration/add" class="btn btn-sm btn-success mb-2">Add Configuration</NavLink>
    }
    <table class="table table-striped" style="color:white; background-color: slateblue">
        <thead style="background-color:green;">
            <tr>
                <th style="width: 20%">Organisation</th>
                <th style="width: 10%">User Name</th>
                <th style="width: 20%">Publish To</th>
                <th style="width: 20%">Subscribe To</th>
                <th style="width: 10%">Company Code</th>
                <th style="width: 20%">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (configurations != null)
            {
                foreach (var configuration in configurations)
                {
                    <tr>
                        <td>@configuration.Organization</td>
                        <td>@configuration.UserName</td>
                        <td>@configuration.PublishTo</td>
                        <td>@configuration.SubscribeTo</td>
                        <td>@configuration.CompanyCode</td>
                        @if (configuration.IsDeployed != null && configuration.IsDeployed > 0)
                        {
                            <td style="white-space: nowrap">
                                <button class="btn btn-sm btn-primary mr-1"
                            @onclick="() => EditConfiguration(configuration)">
                                    Edit Configuration
                                </button> 
                                <button class="btn btn-sm btn-primary mr-1"
                            @onclick="() => LaunchDeployment(configuration)">
                                    Launch Deployment
                                </button>
                            </td>
                        }
                        else
                        {
                            <td style="white-space: nowrap">
                                <button class="btn btn-sm btn-primary mr-1"
                            @onclick="() => LaunchDeployment(configuration)">
                                    Launch Deployment
                                </button>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
    <br />
    @if (loading)
    {
        <div class="loading-container">
            <div class="sample loading-message">
                <span class="spinner-border spinner-border-lg mr-1"></span>
                <span>Please wait, the below docker images are getting deployed for this Client.</span>
                <br />
                <span>Message broker</span>
                <br />
                <span>Publisher Service</span>
                <br />
                <span>Subscriber Service</span>
            </div>
        </div>
    }
</div>


@code {
    private bool loading;
    private IList<Configuration> configurations;

    protected override async Task OnInitializedAsync()
    {
        AlertService.Clear();
        loading = true;
        User user = await AccountService.GetLoggedInUserDetails();
        if (user != null)
        {
            configurations = await AccountService.GetUserConfigurations(user.Username, user.Organisation);
        }
        loading = false;
    }
    
    private void EditConfiguration(Configuration configuration)
    {
        navigationMgr.NavigateTo($"editconfiguration?id={configuration.id}");
    }
    private async Task LaunchDeployment(Configuration configuration)
    {
        AlertService.Clear();
        loading = true;
        await AccountService.LaunchDeployment(configuration);
        User user = await AccountService.GetLoggedInUserDetails();
        if (user != null)
        {
            configurations = await AccountService.GetUserConfigurations(user.Username, user.Organisation);
        } 
        await jsRuntime.InvokeVoidAsync("showAlert", "Deployment completed successfully!");
        loading = false;
    }
}
