@page "/login"
@inject IJSRuntime JSRuntime
@layout MainLayout
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime


<div class="card">
    <h4 class="card-header" style="color:blue;">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="register" class="btn btn-link">Register</NavLink>
        </EditForm>
    </div>
</div>

@code {
    private BlazorApp.Web.Models.Login model = new BlazorApp.Web.Models.Login();
    private bool loading;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            bool status = await AccountService.Login(model);
            if (status)
            {
                var returnUrl = NavigationManager.QueryString("returnUrl") ?? "/configuration";
                NavigationManager.NavigateTo(returnUrl);
                // Trigger a page reload using JavaScript interop
                await JSRuntime.InvokeVoidAsync("showAlert", "Login successful!");
                await JSRuntime.InvokeVoidAsync("location.reload");
            }
            else
            {  
                await JSRuntime.InvokeVoidAsync("showError", "Login failed!");
                NavigationManager.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showError", "Login failed!");
            loading = false;
            StateHasChanged();
            NavigationManager.NavigateTo("/login");
        }
    }

}